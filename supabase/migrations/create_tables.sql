-- Create months table
create table if not exists public.months (
    id bigint generated by default as identity primary key,
    name text not null unique,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create entries table
create table if not exists public.entries (
    id bigint generated by default as identity primary key,
    month_id bigint references public.months(id) on delete cascade,
    dispos text not null,
    lider text not null,
    celulas integer not null default 0,
    meta decimal(10,2) not null default 0,
    arrecadado decimal(10,2) not null default 0,
    percentage decimal(10,2) generated always as (
        case 
            when meta > 0 then (arrecadado / meta * 100)
            else 0 
        end
    ) stored,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create trigger to update updated_at timestamp
create or replace function public.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$ language plpgsql;

-- Create trigger for entries table
create trigger handle_updated_at
    before update on public.entries
    for each row
    execute function public.handle_updated_at();

-- Create RLS policies
alter table public.months enable row level security;
alter table public.entries enable row level security;

-- Create policies for authenticated users
create policy "Enable all access for authenticated users" on public.months
    for all
    to authenticated
    using (true)
    with check (true);

create policy "Enable all access for authenticated users" on public.entries
    for all
    to authenticated
    using (true)
    with check (true);

-- Insert initial month
insert into public.months (name) values ('JANEIRO/25')
on conflict (name) do nothing;

-- Insert initial entries for JANEIRO/25
do $$
declare
    v_month_id bigint;
begin
    select id into v_month_id from public.months where name = 'JANEIRO/25';
    
    insert into public.entries (month_id, dispos, lider, celulas, meta, arrecadado) values
    (v_month_id, 'BISPOS', 'Marcos e Laura', 0, 0, 3800.00),
    (v_month_id, 'ADR 1', 'Dc. Arthur e Priscilla', 2, 140.00, 500.00),
    (v_month_id, 'ADR 2', 'Miss. Fábio e Patricia', 5, 350.00, 110.00),
    (v_month_id, 'ADR 3', 'Dc. Estevão e Thais', 1, 70.00, 0),
    (v_month_id, 'ADR 4', 'Dc. Carlos e Leila', 0, 70.00, 0),
    (v_month_id, 'ADR 5', 'Ob. Gabriel e Carla', 2, 140.00, 150.00),
    (v_month_id, 'ADR 6', 'Ob. Guilherme e Elizabete', 1, 70.00, 0),
    (v_month_id, 'ADR 7', 'Miss. Gabriel e Monisy', 17, 1190.00, 0),
    (v_month_id, 'ADR 8', 'Dc. Gabriel e Ana Beatriz', 7, 490.00, 70.00),
    (v_month_id, 'ADR 9', 'João Gabriel e Julyana', 2, 140.00, 250.00),
    (v_month_id, 'ADR 10', 'Elias e Andressa', 1, 70.00, 426.00),
    (v_month_id, 'ADR 11', 'Joel e Joice', 0, 70.00, 150.00),
    (v_month_id, 'ADR 12', 'Pr. Didácio', 1, 70.00, 0),
    (v_month_id, 'ADR 14', 'Dc. Israel e Priscyla', 1, 70.00, 0),
    (v_month_id, 'ADR 15', 'Miss. Marcus e Giselle', 18, 1260.00, 1045.00),
    (v_month_id, 'ADR 16', 'Dc. Wagmar e Simone', 0, 140.00, 0),
    (v_month_id, 'ADR 17', 'Ob. Michel e Priscila', 0, 70.00, 0),
    (v_month_id, 'ADR 18', 'Ob Nilton e Ana', 4, 280.00, 150.00),
    (v_month_id, 'ADR 19', 'Dc. Paula Gaston', 3, 210.00, 280.00),
    (v_month_id, 'ADR 20', 'Ob. Adelton e Flávia', 1, 70.00, 0),
    (v_month_id, 'ADR 21', 'Dc. Israel e Paula', 0, 70.00, 0),
    (v_month_id, 'ADR 22', 'Ob. Júnior e Madhara', 2, 140.00, 10.85),
    (v_month_id, 'ADR 23', 'João e Eloiza', 1, 70.00, 0),
    (v_month_id, 'ADR 24', 'Ob. Flávio e Gisely', 1, 70.00, 250.00),
    (v_month_id, 'ADR 25', 'Pr. Alessandro e Kamila', 1, 70.00, 170.00),
    (v_month_id, 'ADR 26', 'Pr. Rafael e Amanda', 1, 70.00, 0);
end $$;
